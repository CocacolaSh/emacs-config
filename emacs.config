;;(add-to-list 'load-path(expand-file-name "~/.emacs.d"))
;;(add-to-list 'load-path "~/.emacs.d/plugins")
;;(add-to-list 'load-path "~/.emacs.d/settings")
(add-to-list 'load-path(expand-file-name "~/emacsconfig/emacs.d"))
(add-to-list 'load-path "~/emacsconfig/emacs.d/plugins")
(add-to-list 'load-path "~/emacsconfig/emacs.d/settings")


(add-to-list 'load-path "~/emacsconfig/emacs.d/plugins/auto-complete")
(load-file "~/emacsconfig/emacs.d/plugins/xterm-256color.el")
(require 'ahei-misc)
(require 'php-dev-settings)


(require 'highlight-symbol-settings)
(require 'language-settings)
(require 'global-keybind-settings)

(require 'basic-settings)
(require 'theme-settings)

(require 'tabbar-settings)

(require 'yasnippet-settings)
;;(require 'scons-settings)
(require 'cc-dev-settings)

;;(require 'haskell-dev-settings)

;;(require 'auto-complete-settings)
(require 'speedbar-settings)
(require 'gdb-settings)

(require 'desktop-settings)
(my-desktop-mode t)

(require 'recentjump-settings)
(require 'auto-complete-settings)
;;(require 'quick-jump)
;;(quick-jump-default-keybinding)
;;emacs的Demon模式服务
(server-start)

;;======================  常用设置 ==============================;


;;======================  常用设置结束 =============================

;;=======================  设置窗口界面 =============================;
(set-scroll-bar-mode nil)
;;取消滚动栏

;;(customize-set-variable 'scroll-bar-mode 'right))
;;设置滚动栏在窗口右侧，而默认是在左侧



;;下面的这个设置可以让光标指到某个括号的时候显示与它匹配的括号
(show-paren-mode t)
(hs-minor-mode t)
(setq show-paren-style 'parentheses)
;;高亮显示选择区域
(setq transient-mark-mode nil)

;;========================= end window =================================




;;==================== other extension ===================;
;;some extension

;;
(load "desktop") 
;;(desktop-save-mode)
(desktop-load-default)

(require 'session)
(add-hook 'after-init-hook 'session-initialize)

;;
(desktop-save-mode 1)

;;highlight the mark set region
(transient-mark-mode t)

;;the go-to-char
(defun wy-go-to-char (n char)
  "Move forward to Nth occurence of CHAR.
Typing `wy-go-to-char-key' again will move forwad to the next Nth
occurence of CHAR."
  (interactive "p\ncGo to char: ")
  (search-forward (string char) nil nil n)
  (while (char-equal (read-char)
		     char)
    (search-forward (string char) nil nil n))
  (setq unread-command-events (list last-input-event)))

(define-key global-map (kbd "C-c a") 'wy-go-to-char)

(define-key global-map (kbd "C-c t") 'find-tag)
(put 'narrow-to-region 'disabled nil)



;;convert text files between unix and dos
(defun dos-unix () (interactive)
  (goto-char (point-min))
  (while (search-forward "\r" nil t) (replace-match "")))
(defun unix-dos () (interactive)
  (goto-char (point-min))
  (while (search-forward "\n" nil t) (replace-match "\r\n")))


(setq auto-mode-alist
      (append '(("\\.cpp$" . c++-mode)
		("\\.hpp$" . c++-mode)
		("\\.h$" . c++-mode)
		("\\.lsp$" . lisp-mode)
		("\\.scm$" . scheme-mode)
		("\\.pl$" . perl-mode)
		) auto-mode-alist))


;; Pretty diff mode
(autoload 'ediff-buffers "ediff" "Intelligent Emacs interface to diff" t)
(autoload 'ediff-files "ediff" "Intelligent Emacs interface to diff" t)
(autoload 'ediff-files-remote "ediff"
  "Intelligent Emacs interface to diff")
;;======================= end other extension ==================;

;;==================== clear some buffers ======================;
;;{{{ 删除一些临时的buffers，少占我的内存
(defvar my-clean-buffers-names
  '("\\*Completions" "\\*Compile-Log" "\\*.*[Oo]utput\\*$" "\\*info"  "\\*Ibuffer\\*" "\\*cscope\\*"
    "\\*Apropos" "\\*compilation" "\\*Customize" "\\*Calc""\\keywiz-scores"
    "\\*BBDB\\*" "\\*trace of SMTP" "\\*vc" "\\*cvs" "\\*keywiz"
    "\\*WoMan-Log" "\\*tramp" "\\*desktop\\*" ;;"\\*Async Shell Command"
    )
  "List of regexps matching names of buffers to kill.")

(defvar my-clean-buffers-modes
  '(help-mode );Info-mode)
  "List of modes whose buffers will be killed.")

(defun my-clean-buffers ()
  "Kill buffers as per `my-clean-buffer-list' and `my-clean-buffer-modes'."
  (interactive)
  (let (string buffname)
    (mapcar (lambda (buffer)
              (and (setq buffname (buffer-name buffer))
                   (or (catch 'found
                         (mapcar '(lambda (name)
                                    (if (string-match name buffname)
                                        (throw 'found t)))
                                 my-clean-buffers-names)
                         nil)
                       (save-excursion
                         (set-buffer buffname)
                         (catch 'found
                           (mapcar '(lambda (mode)
                                      (if (eq major-mode mode)
                                          (throw 'found t)))
                                   my-clean-buffers-modes)
                           nil)))
                   (kill-buffer buffname)
                   (setq string (concat string
                                        (and string ", ") buffname))))
            (buffer-list))
    (if string (message "清理buffer: %s" string)
    ;(if string (message "Deleted: %s" string)
       (message "没有多余的buffer"))))
      ;(message "No buffers deleted"))))
;;}}}


(defvar wcy-c/c++-hightligh-included-files-key-map nil)
(if wcy-c/c++-hightligh-included-files-key-map
    nil
  (setq wcy-c/c++-hightligh-included-files-key-map (make-sparse-keymap))
  (define-key wcy-c/c++-hightligh-included-files-key-map (kbd "<RET>") 'find-file-at-point))
 
(defun wcy-c/c++-hightligh-included-files ()
  (interactive)
  (when (or (eq major-mode 'c-mode)
            (eq major-mode 'c++-mode))
    (save-excursion
      (goto-char (point-min))
      ;; remove all overlay first
      (mapc (lambda (ov) (if (overlay-get ov 'wcy-c/c++-hightligh-included-files)
                             (delete-overlay ov)))
            (overlays-in (point-min) (point-max)))
      (while (re-search-forward "^#include[ \t]+[\"<]\\(.*\\)[\">]" nil t nil)
        (let* ((begin  (match-beginning 1))
               (end (match-end 1))
               (ov (make-overlay begin end)))
          (overlay-put ov 'wcy-c/c++-hightligh-included-files t)
          (overlay-put ov 'keymap wcy-c/c++-hightligh-included-files-key-map)
          (overlay-put ov 'face 'underline))))))
;; 这不是一个好办法，也可以把它加载到 c-mode-hook or c++-mode-hook 中。
(setq wcy-c/c++-hightligh-included-files-timer (run-with-idle-timer 4 t 'wcy-c/c++-hightligh-included-files))


;; go-to-definition-menu
(defun my-imenu-helper()
(let (index-alist
(result t)
alist)
;; Create a list for this buffer only when needed.
(while (eq result t)
(setq index-alist (imenu--make-index-alist))
(setq result (imenu--mouse-menu index-alist t))
(and (equal result imenu--rescan-item)
(imenu--cleanup)
(setq result t imenu--index-alist nil)))
result))

(defun my-imenu() (interactive) (imenu (my-imenu-helper)))
(global-set-key [?\M-\m] 'my-imenu)

